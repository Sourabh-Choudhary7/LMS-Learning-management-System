import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { loadStripe } from '@stripe/stripe-js';
import Layout from '../../layout/Layout';
import { BiRupee } from 'react-icons/bi';
import { getStripePayKey, buySubcription } from '../../redux/Slices/PaymentSlice';
import toast from 'react-hot-toast';

const Checkout = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();

    const key = useSelector((state) => state?.payment?.stripeKey);

    useEffect(() => {
        // Fetch the Stripe public key
        dispatch(getStripePayKey());
    }, [dispatch]);

    // Load Stripe instance
    const stripePromise = loadStripe(key);
    
    const handleSubscription = async (e) => {
        e.preventDefault();

        try {
            const stripe = await stripePromise; // Load the Stripe instance
            const res = await dispatch(buySubcription()); // Attempt to create the subscription

            if (res?.payload?.success) {
                const { url, subscription_id } = res.payload; // Assuming your response contains these fields

                // Redirect to Stripe checkout
                const { error } = await stripe.redirectToCheckout({
                    sessionId: subscription_id,  // Use the session ID generated by backend
                });

                if (error) {
                    toast.error("Error redirecting to checkout. Please try again.");
                    console.error("Stripe Error:", error);
                }
            } else {
                toast.error("Failed to create subscription.");
            }
        } catch (error) {
            navigate('/checkout/fail');
            toast.error("Payment failed. Please try again.");
            console.error("Payment Error:", error);
        }
    };

    return (
        <Layout>
            <form onSubmit={handleSubscription} className="min-h-[90vh] flex items-center justify-center text-white">
                <div className="w-80 h-[26rem] flex flex-col justify-center shadow-[0_0_10px_black] rounded-lg relative">
                    <h1 className="bg-yellow-500 absolute top-0 w-full text-center py-4 text-2xl font-bold rounded-tl-lg rounded-tr-lg">
                        Subscription Bundle
                    </h1>
                    <div className="px-4 space-y-5 text-center">
                        <p className="text-[17px]">
                            This purchase will allow you to access all available courses on our platform for{' '}
                            <span className="text-yellow-500 font-bold"><br />1 Year</span> duration. All existing and newly launched courses will be available.
                        </p>

                        <p className="flex items-center justify-center gap-1 text-2xl font-bold text-yellow-500">
                            <BiRupee /><span>499</span> only
                        </p>

                        <div className="text-gray-200">
                            <p>100% refund on cancellation</p>
                            <p>* Terms and conditions apply *</p>
                        </div>

                        <button
                            type="submit"
                            className="bg-yellow-500 hover:bg-yellow-600 transition-all ease-in-out duration-300 absolute bottom-0 w-full left-0 text-xl font-bold rounded-bl-lg rounded-br-lg py-2"
                        >
                            Buy Now
                        </button>
                    </div>
                </div>
            </form>
        </Layout>
    );
};

export default Checkout;
